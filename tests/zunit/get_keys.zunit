#!/usr/bin/env zunit

@setup {
    script_path="${BASH_SOURCE[0]}"; srcd="${srcd:-${(%):-%x}}"
    base_path="$(builtin cd "$(dirname "${script_path}")" && builtin pwd)"
    source "${base_path}/bash_pseudo_hash.sh" || return 1
}

@test 'should_gets_keys' {
    local hash; hash=()
    local testKeys="Phrase1 Phrase2 Phrase3"
    local testKeys_ary; testKeys_ary=()
    local expectedKeys="${testKeys}"
    local defaultIFS="$IFS"
    local IFS="$defaultIFS"

    IFS=$' ' testKeys_ary=( ${testKeys} ) IFS="$defaultIFS"

    for key in "${testKeys_ary[@]}"
    do
        local __val="100${key:(-1)} pounds of spaghettiü"
        hash=( $(setValueForKeyFakeAssocArray "${key}" "${__val}" "${hash[*]}") )
    done

    local returnedKeys="$(keysForFakeAssocArray "${hash[*]}")"
    assert "${expectedKeys}" same_as "${returnedKeys}"
}

@test 'should_gets_keys_RETVAL' {
    local hash; hash=()
    local testKeys="Phrase1 Phrase2 Phrase3"
    local testKeys_ary; testKeys_ary=()
    local expectedKeys="${testKeys}"
    local defaultIFS="$IFS"
    local IFS="$defaultIFS"

    IFS=$' ' testKeys_ary=( ${testKeys} ) IFS="$defaultIFS"

    for key in "${testKeys_ary[@]}"
    do
        local __val="100${key:(-1)} pounds of spaghettiü"
        setValueForKeyFakeAssocArray "${key}" "${__val}" "${hash[*]}" > /dev/null
        hash="${RETVAL}"
    done

    local returnedKeys=""; keysForFakeAssocArray "${hash[*]}" > /dev/null; returnedKeys="${RETVAL}"
    assert "${expectedKeys}" same_as "${returnedKeys}"
}
